###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         31/Jan/2019  14:41:04
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Drivers\Source\MacaInterrupt.c
#    Command line =  
#        -f C:\Users\Brus\AppData\Local\Temp\EWFAEC.tmp
#        (D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Drivers\Source\MacaInterrupt.c
#        -D NDEBUG -D F24MHZ -D SECURITY_ENABLED -D MC13226Included_d=0
#        --preprocess=cs
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List -lC
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List -lB
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List
#        --diag_suppress Pe940,Pe951,Pe911 -o
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\Obj
#        --endian=little --cpu=ARM7TDMI-S --fpu=None --dlib_config
#        "C:\HDDPrograms\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Drivers\Interface\
#        -I D:\Users\Brus\Documents\repeater_test\Repeater\PLM\Interface\
#        --cpu_mode thumb -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List\MacaInterrupt.lst
#    Object file  =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\Obj\MacaInterrupt.o
#
###############################################################################

D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Drivers\Source\MacaInterrupt.c
      1          /************************************************************************************
      2          * Maca Interrupt implementation
      3          *
      4          * (c) Copyright 2008, Freescale, Inc.  All rights reserved.
      5          *
      6          * No part of this document must be reproduced in any form - including copied,
      7          * transcribed, printed or by any electronic means - without specific written
      8          * permission from Freescale.
      9          *
     10          * Last Inspected:
     11          * Last Tested:
     12          ************************************************************************************/
     13          #include "../../../PLM/Interface/EmbeddedTypes.h"
     14          #include "../../../PLM/LibInterface/ITC_Interface.h"
     15          
     16          #include "../Interface/ghdr/maca.h"
     17          #include "../../../PLM/LibInterface/Platform.h"
     18          #include "../../Interface/RadioManagement.h"
     19          #include "../../Interface/TransceiverConfigMngmnt.h"
     20          #include "../Interface/MacaInterrupt.h"
     21          
     22          
     23          
     24          /************************************************************************************
     25          *************************************************************************************
     26          * Private macros
     27          *************************************************************************************
     28          ************************************************************************************/
     29          #define ZERO (0)
     30          
     31          #define _is_action_started_interrupt(x)      (ZERO != (maca_irq_strt & x))
     32          #define _is_sync_detected_interrupt(x)       (ZERO != (maca_irq_sync & x))
     33          #define _is_complete_clock_interrupt(x)      (ZERO != (maca_irq_cm & x))
     34          #define _is_checksum_failed_interrupt(x)     (ZERO != (maca_irq_crc & x))
     35          #define _is_filter_failed_interrupt(x)       (ZERO != (maca_irq_flt & x))
     36          #define _is_soft_complete_clock_interrupt(x) (ZERO != (maca_irq_sftclk & x))
     37          #define _is_fifo_level_interrupt(x)          (ZERO != (maca_irq_lvl & x))
     38          #define _is_reset_interrupt(x)               (ZERO != (maca_irq_rst & x))
     39          #define _is_wake_up_interrupt(x)             (ZERO != (maca_irq_wu & x))
     40          #define _is_data_indication_interrupt(x)     (ZERO != (maca_irq_di & x))
     41          #define _is_poll_indication_interrupt(x)     (ZERO != (maca_irq_poll & x))
     42          #define _is_action_complete_interrupt(x)     (ZERO != (maca_irq_acpl & x))
     43          
     44          
     45          #define _is_an_unused_interrupt(x)  \
     46                        ( _is_poll_indication_interrupt(x))
     47          
     48          #define _is_a_timeout_interrupt(x) \
     49                        ( _is_soft_complete_clock_interrupt(x) || \
     50                          _is_complete_clock_interrupt(x) )
     51          
     52          #define maca_status_control_code  ((maca_status) & maca_status_cc_mask)
     53          
     54          
     55          /************************************************************************************
     56          *************************************************************************************
     57          * Private prototypes
     58          *************************************************************************************
     59          ************************************************************************************/
     60          
     61          
     62          /************************************************************************************
     63          *************************************************************************************
     64          * Private type definitions
     65          *************************************************************************************
     66          ************************************************************************************/
     67          
     68          
     69          /************************************************************************************
     70          *************************************************************************************
     71          * Private memory declarations
     72          *************************************************************************************
     73          ************************************************************************************/

   \                                 In section .bss, align 1
     74          static uint8_t mMacaIsrEntryCounter = 0;
   \                     mMacaIsrEntryCounter:
   \        0x0                      DS8 1
     75          
     76          
     77          /************************************************************************************
     78          *************************************************************************************
     79          * Public memory declarations
     80          *************************************************************************************
     81          ************************************************************************************/
     82          bool_t flag;
   \                     flag:
   \        0x1                      DS8 1
     83          
     84          
     85          
     86          
     87          /************************************************************************************
     88          *************************************************************************************
     89          * Private functions
     90          *************************************************************************************
     91          ************************************************************************************/
     92          
     93          /* 
     94           * Do the ABORT-Wait-NOP-Wait sequence in order to prevent MACA malfunctioning.
     95           * This seqeunce is synchronous and no interrupts should be triggered when it is done.
     96           */

   \                                 In section .text, align 2, keep-with-next
     97          void ResumeMACASync(void)
     98          { 
   \                     ResumeMACASync: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
     99            uint32_t clk, TsmRxSteps, LastWarmupStep, LastWarmupData, LastWarmdownStep, LastWarmdownData;
    100          //  bool_t tmpIsrStatus;
    101            volatile uint32_t i;
    102          
    103            ITC_DisableInterrupt(gMacaInt_c);  
   \        0x2   0x2007             MOVS     R0,#+7
   \        0x4   0x....'....        BL       ITC_DisableInterrupt
    104          
    105            /* Manual TSM modem shutdown */
    106          
    107            /* read TSM_RX_STEPS */
    108            TsmRxSteps = (*((volatile uint32_t *)(0x80009204)));
   \        0x8   0x....             LDR      R0,??DataTable1  ;; 0x80009204
   \        0xA   0x6803             LDR      R3,[R0, #+0]
    109           
    110            /* isolate the RX_WU_STEPS */
    111            /* shift left to align with 32-bit addressing */
    112            LastWarmupStep = (TsmRxSteps & 0x1f) << 2;
   \        0xC   0x247C             MOVS     R4,#+124
   \        0xE   0x0098             LSLS     R0,R3,#+2
   \       0x10   0x4020             ANDS     R0,R0,R4
    113            /* Read "current" TSM step and save this value for later */
    114            LastWarmupData = (*((volatile uint32_t *)(0x80009300 + LastWarmupStep)));
   \       0x12   0x....             LDR      R2,??DataTable1_1  ;; 0x80009300
   \       0x14   0x1880             ADDS     R0,R0,R2
   \       0x16   0x6801             LDR      R1,[R0, #+0]
    115          
    116            /* isolate the RX_WD_STEPS */
    117            /* right-shift bits down to bit 0 position */
    118            /* left-shift to align with 32-bit addressing */
    119            LastWarmdownStep = ((TsmRxSteps & 0x1f00) >> 8) << 2;
    120            /* write "last warmdown data" to current TSM step to shutdown rx */
    121            LastWarmdownData = (*((volatile uint32_t *)(0x80009300 + LastWarmdownStep)));
   \       0x18   0x099B             LSRS     R3,R3,#+6
   \       0x1A   0x401C             ANDS     R4,R4,R3
   \       0x1C   0x18A2             ADDS     R2,R4,R2
   \       0x1E   0x6812             LDR      R2,[R2, #+0]
    122            (*((volatile uint32_t *)(0x80009300 + LastWarmupStep))) = LastWarmdownData;
   \       0x20   0x6002             STR      R2,[R0, #+0]
    123          
    124            /* Abort */
    125            MACA_WRITE(maca_control, 1);
   \       0x22   0x....             LDR      R2,??DataTable1_2  ;; 0x8000400c
   \       0x24   0x2301             MOVS     R3,#+1
   \       0x26   0x6013             STR      R3,[R2, #+0]
    126            
    127            /* Wait ~8us */
    128            for (clk = maca_clk, i = 0; maca_clk - clk < 3 && i < 300; i++)
   \       0x28   0x6BD5             LDR      R5,[R2, #+60]
   \       0x2A   0x2300             MOVS     R3,#+0
   \       0x2C   0x9300             STR      R3,[SP, #+0]
   \       0x2E   0x2496             MOVS     R4,#+150
   \       0x30   0x0064             LSLS     R4,R4,#+1        ;; #+300
   \                     ??ResumeMACASync_0: (+1)
   \       0x32   0x6BD6             LDR      R6,[R2, #+60]
   \       0x34   0x1B76             SUBS     R6,R6,R5
   \       0x36   0x2E03             CMP      R6,#+3
   \       0x38   0xD20C             BCS      ??ResumeMACASync_1
   \       0x3A   0x9E00             LDR      R6,[SP, #+0]
   \       0x3C   0x42A6             CMP      R6,R4
   \       0x3E   0xD209             BCS      ??ResumeMACASync_1
   \       0x40   0x9E00             LDR      R6,[SP, #+0]
   \       0x42   0x1C76             ADDS     R6,R6,#+1
   \       0x44   0x9600             STR      R6,[SP, #+0]
   \       0x46   0xE7F4             B        ??ResumeMACASync_0
    129              ;
    130           
    131            /* NOP */
    132            MACA_WRITE(maca_control, 0);  
    133            
    134            /* Wait ~8us */  
    135            for (clk = maca_clk, i = 0; maca_clk - clk < 3 && i < 300; i++)
   \                     ??ResumeMACASync_2: (+1)
   \       0x48   0x9B00             LDR      R3,[SP, #+0]
   \       0x4A   0x42A3             CMP      R3,R4
   \       0x4C   0xD209             BCS      ??ResumeMACASync_3
   \       0x4E   0x9B00             LDR      R3,[SP, #+0]
   \       0x50   0x1C5B             ADDS     R3,R3,#+1
   \       0x52   0xE001             B        ??ResumeMACASync_4
   \                     ??ResumeMACASync_1: (+1)
   \       0x54   0x6013             STR      R3,[R2, #+0]
   \       0x56   0x6BD5             LDR      R5,[R2, #+60]
   \                     ??ResumeMACASync_4: (+1)
   \       0x58   0x9300             STR      R3,[SP, #+0]
   \       0x5A   0x6BD3             LDR      R3,[R2, #+60]
   \       0x5C   0x1B5B             SUBS     R3,R3,R5
   \       0x5E   0x2B03             CMP      R3,#+3
   \       0x60   0xD3F2             BCC      ??ResumeMACASync_2
    136              ;
    137             
    138          
    139            /* restore original "last warmup step" data to TSM (VERY IMPORTANT!!!) */
    140            (*((volatile uint32_t *)(0x80009300 + LastWarmupStep))) = LastWarmupData;
   \                     ??ResumeMACASync_3: (+1)
   \       0x62   0x6001             STR      R1,[R0, #+0]
    141          
    142            
    143            
    144            /* Clear all MACA interrupts - we should have gotten the ABORT IRQ */
    145            MACA_WRITE(maca_clrirq, 0xFFFF);
   \       0x64   0x....             LDR      R0,??DataTable1_3  ;; 0xffff
   \       0x66   0x....             LDR      R1,??DataTable1_4  ;; 0x800040c4
   \       0x68   0x6008             STR      R0,[R1, #+0]
    146          
    147            ITC_EnableInterrupt(gMacaInt_c);
   \       0x6A   0x2007             MOVS     R0,#+7
   \       0x6C   0x....'....        BL       ITC_EnableInterrupt
    148          }
   \       0x70   0xBC73             POP      {R0,R1,R4-R6}
   \       0x72   0xBC08             POP      {R3}
   \       0x74   0x4718             BX       R3               ;; return
    149          
    150          
    151          /************************************************************************************
    152          *************************************************************************************
    153          * Public functions
    154          *************************************************************************************
    155          ************************************************************************************/
    156          
    157          /************************************************************************************
    158          * MACA_Interrupt
    159          *
    160          * This function is the MACA Interrupt Service Routine
    161          *
    162          ************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    163          void MACA_Interrupt(void)
    164          {
   \                     MACA_Interrupt: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    165            uint32_t irqSrc;
    166            irqSrc = maca_irq;
   \        0x2   0x....             LDR      R0,??DataTable1_5  ;; 0x800040c0
   \        0x4   0x6804             LDR      R4,[R0, #+0]
    167            maca_clrirq = irqSrc;
   \        0x6   0x6044             STR      R4,[R0, #+4]
    168            mMacaIsrEntryCounter++;
   \        0x8   0x....             LDR      R0,??DataTable1_6
   \        0xA   0x7800             LDRB     R0,[R0, #+0]
   \        0xC   0x1C40             ADDS     R0,R0,#+1
   \        0xE   0x....             LDR      R1,??DataTable1_6
   \       0x10   0x7008             STRB     R0,[R1, #+0]
    169          
    170            if( _is_action_started_interrupt(irqSrc) )
   \       0x12   0x....             LDR      R5,??DataTable1_7
   \       0x14   0x0420             LSLS     R0,R4,#+16
   \       0x16   0xD503             BPL      ??MACA_Interrupt_1
    171            {
    172              gRadioEvntFlags.Bits.action_started_flag = TRUE;
   \       0x18   0x6828             LDR      R0,[R5, #+0]
   \       0x1A   0x2101             MOVS     R1,#+1
   \       0x1C   0x4301             ORRS     R1,R1,R0
   \       0x1E   0x6029             STR      R1,[R5, #+0]
    173            }
    174            
    175             
    176            if(_is_action_complete_interrupt(irqSrc)){
   \                     ??MACA_Interrupt_1: (+1)
   \       0x20   0x6828             LDR      R0,[R5, #+0]
   \       0x22   0x....             LDR      R6,??DataTable1_2  ;; 0x8000400c
   \       0x24   0x07E1             LSLS     R1,R4,#+31
   \       0x26   0xD546             BPL      ??MACA_Interrupt_2
    177              gRadioEvntFlags.Bits.action_complete_flag = TRUE;
   \       0x28   0x2120             MOVS     R1,#+32
   \       0x2A   0x4301             ORRS     R1,R1,R0
   \       0x2C   0x6029             STR      R1,[R5, #+0]
    178              execute_current_message_callback();    
   \       0x2E   0x....'....        BL       execute_current_message_callback
    179              switch(maca_status_control_code){
   \       0x32   0x6828             LDR      R0,[R5, #+0]
   \       0x34   0x2780             MOVS     R7,#+128
   \       0x36   0x6871             LDR      R1,[R6, #+4]
   \       0x38   0x0709             LSLS     R1,R1,#+28
   \       0x3A   0x0F09             LSRS     R1,R1,#+28
   \       0x3C   0x290F             CMP      R1,#+15
   \       0x3E   0xD811             BHI      ??MACA_Interrupt_3
   \       0x40   0xA201             ADR      R2,??MACA_Interrupt_0
   \       0x42   0x5C52             LDRB     R2,[R2, R1]
   \       0x44   0x4497             ADD      PC,PC,R2
   \       0x46   0x46C0             Nop      
   \                     ??MACA_Interrupt_0:
   \       0x48   0x10 0x1E          DC8      0x10,0x1E,0x2A,0x2E
   \              0x2A 0x2E    
   \       0x4C   0x32 0xE6          DC8      0x32,0xE6,0xEA,0xEA
   \              0xEA 0xEA    
   \       0x50   0x36 0x40          DC8      0x36,0x40,0xEA,0xEA
   \              0xEA 0xEA    
   \       0x54   0xEA 0x5C          DC8      0xEA,0x5C,0x60,0x6A
   \              0x60 0x6A    
    180                case(cc_success):
    181                  {
    182                    gRadioEvntFlags.Bits.ac_success_flag = TRUE;
   \                     ??MACA_Interrupt_4: (+1)
   \       0x58   0x2140             MOVS     R1,#+64
   \       0x5A   0x4301             ORRS     R1,R1,R0
   \       0x5C   0x6029             STR      R1,[R5, #+0]
    183                    // notify main task that a new data request can
    184                    // be sent to MACA;
    185                    flag = TRUE;
   \       0x5E   0x2001             MOVS     R0,#+1
   \       0x60   0x....             LDR      R1,??DataTable1_6
   \       0x62   0x7048             STRB     R0,[R1, #+1]
    186                  }
    187                  break;
   \                     ??MACA_Interrupt_3: (+1)
   \       0x64   0xE065             B        ??MACA_Interrupt_5
    188                case(cc_timeout):
    189                  {
    190                    /* Prevent MACA lock-up and prepare the event to inject on aborted or not_completed irq */
    191                    ResumeMACASync();
   \                     ??MACA_Interrupt_6: (+1)
   \       0x66   0x....'....        BL       ResumeMACASync
    192                    gRadioEvntFlags.Bits.ac_timeout_flag = TRUE;
   \       0x6A   0x6828             LDR      R0,[R5, #+0]
   \       0x6C   0x4307             ORRS     R7,R7,R0
   \       0x6E   0x602F             STR      R7,[R5, #+0]
    193                  }
    194                  break;
   \       0x70   0xE05F             B        ??MACA_Interrupt_5
    195                case(cc_channel_busy):
    196                  {
    197                    gRadioEvntFlags.Bits.ac_channel_busy_flag = TRUE;
   \                     ??MACA_Interrupt_7: (+1)
   \       0x72   0x0DF1             LSRS     R1,R6,#+23
   \       0x74   0xE056             B.N      ??MACA_Interrupt_8
    198                  }
    199                  break;
    200                case(cc_crc_fail):
    201                  {
    202                    gRadioEvntFlags.Bits.ac_crc_failed_flag = TRUE;
   \                     ??MACA_Interrupt_9: (+1)
   \       0x76   0x0DB1             LSRS     R1,R6,#+22
   \       0x78   0xE054             B.N      ??MACA_Interrupt_8
    203                  }
    204                  break;
    205                case(cc_aborted):
    206                  {
    207                    gRadioEvntFlags.Bits.ac_aborted_flag = TRUE;
   \                     ??MACA_Interrupt_10: (+1)
   \       0x7A   0x0D71             LSRS     R1,R6,#+21
   \       0x7C   0xE021             B.N      ??MACA_Interrupt_11
    208                    ResumeMACASync();
    209                  }
    210                  break;
    211                case(cc_no_ack):
    212                  {
    213                    /* Prevent MACA lock-up and prepare the event to inject on aborted or not_completed irq */
    214                    ResumeMACASync();
    215                    /* Not used in SMAC */
    216                  }
    217                  break;
    218                case(cc_no_data):
    219                  {
    220                    /* Not used in SMAC */
    221                  }
    222                  break;
    223                case(cc_late_start):
    224                  {
    225                    /* Not used in SMAC */
    226                  }
    227                  break;
    228                case(cc_ext_timeout):
    229                  {
    230                    /* Prevent MACA lock-up and prepare the event to inject on aborted or not_completed irq */
    231                    ResumeMACASync();
   \                     ??MACA_Interrupt_12: (+1)
   \       0x7E   0x....'....        BL       ResumeMACASync
    232                    gRadioEvntFlags.Bits.ac_ext_timeout_flag = TRUE;
   \       0x82   0x6828             LDR      R0,[R5, #+0]
   \       0x84   0x0C71             LSRS     R1,R6,#+17
   \       0x86   0xE04D             B.N      ??MACA_Interrupt_8
    233                  }
    234                  break;
    235                case(cc_ext_pnd_timeout):
    236                  {
    237                    /* Prevent MACA lock-up and prepare the event to inject on aborted or not_completed irq */
    238                    ResumeMACASync();
   \                     ??MACA_Interrupt_13: (+1)
   \       0x88   0x....'....        BL       ResumeMACASync
    239                    if ((irqSrc & maca_irq_crc )|| (irqSrc & maca_irq_flt ))
   \       0x8C   0x20C0             MOVS     R0,#+192
   \       0x8E   0x0140             LSLS     R0,R0,#+5        ;; #+6144
   \       0x90   0x4020             ANDS     R0,R0,R4
   \       0x92   0xD004             BEQ      ??MACA_Interrupt_14
    240                    {
    241                      ResumeMACASync();
   \       0x94   0x....'....        BL       ResumeMACASync
    242                      gRadioEvntFlags.Bits.ac_timeout_flag = TRUE;
   \       0x98   0x6828             LDR      R0,[R5, #+0]
   \       0x9A   0x4307             ORRS     R7,R7,R0
   \       0x9C   0x602F             STR      R7,[R5, #+0]
    243                    }
    244                    gRadioEvntFlags.Bits.ac_ext_pnd_timeout_flag = TRUE;
   \                     ??MACA_Interrupt_14: (+1)
   \       0x9E   0x6828             LDR      R0,[R5, #+0]
   \       0xA0   0x0C31             LSRS     R1,R6,#+16
   \       0xA2   0xE03F             B.N      ??MACA_Interrupt_8
    245                    /* Not used in SMAC */
    246                  }
    247                  break;
    248                case(cc_nc1):
    249                case(cc_nc2):
    250                  {
    251                    /* Not used */
    252                  }
    253                  break;
    254                case(cc_nc3):
    255                  {
    256                    /* Not used in SMAC */
    257                  }
    258                  break;
    259                case(cc_cc_external_abort):
    260                  {
    261                    gRadioEvntFlags.Bits.ac_external_abort_flag = TRUE;
   \                     ??MACA_Interrupt_15: (+1)
   \       0xA4   0x02B9             LSLS     R1,R7,#+10
   \       0xA6   0xE03D             B.N      ??MACA_Interrupt_8
    262                    /* Not used in SMAC */
    263                  }
    264                  break;
    265                case(cc_not_completed):
    266                  {
    267                    /* Prevent MACA lock-up and prepare the event to inject on aborted or not_completed irq */
    268                    ResumeMACASync();
   \                     ??MACA_Interrupt_16: (+1)
   \       0xA8   0x....'....        BL       ResumeMACASync
    269                    gRadioEvntFlags.Bits.ac_not_completed_flag = TRUE;
   \       0xAC   0x6828             LDR      R0,[R5, #+0]
   \       0xAE   0x02F9             LSLS     R1,R7,#+11
   \       0xB0   0xE038             B.N      ??MACA_Interrupt_8
    270                  }
    271                  break;
    272                case(cc_bus_error):
    273                  {
    274                    gRadioEvntFlags.Bits.ac_dma_bus_error_flag = TRUE;
   \                     ??MACA_Interrupt_17: (+1)
   \       0xB2   0x0339             LSLS     R1,R7,#+12
   \       0xB4   0xE036             B.N      ??MACA_Interrupt_8
    275                  }
    276                  break;
    277                default:
    278                  {
    279                  }
    280                  break;
    281              }
    282            }
    283            
    284            else if(_is_checksum_failed_interrupt(irqSrc) && !_is_action_complete_interrupt(irqSrc))
   \                     ??MACA_Interrupt_2: (+1)
   \       0xB6   0x....             LDR      R1,??DataTable1_8  ;; 0x1001
   \       0xB8   0x4021             ANDS     R1,R1,R4
   \       0xBA   0x0CF2             LSRS     R2,R6,#+19
   \       0xBC   0x4291             CMP      R1,R2
   \       0xBE   0xD103             BNE      ??MACA_Interrupt_18
    285            {
    286              gRadioEvntFlags.Bits.checksum_failed_flag = TRUE;
   \       0xC0   0x2108             MOVS     R1,#+8
   \                     ??MACA_Interrupt_11: (+1)
   \       0xC2   0x4301             ORRS     R1,R1,R0
   \       0xC4   0x6029             STR      R1,[R5, #+0]
    287              /* Prevent MACA lock-up and prepare the event to inject on aborted or not_completed irq */
    288              ResumeMACASync();
   \       0xC6   0xE032             B        ??MACA_Interrupt_19
    289            }
    290            
    291            else if(_is_data_indication_interrupt(irqSrc)){
   \                     ??MACA_Interrupt_18: (+1)
   \       0xC8   0x2104             MOVS     R1,#+4
   \       0xCA   0x420C             TST      R4,R1
   \       0xCC   0xD01A             BEQ      ??MACA_Interrupt_20
    292              maca_control = (control_seq_abort | control_asap);
   \       0xCE   0x....             LDR      R0,??DataTable1_9  ;; 0x201
   \       0xD0   0x6030             STR      R0,[R6, #+0]
    293              if(FALSE == MLMEGetPromiscuousMode()){
   \       0xD2   0x....'....        BL       MLMEGetPromiscuousMode
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD10D             BNE      ??MACA_Interrupt_21
    294          #ifndef __ISM_MODE__
    295                if( ((0x7E) == *((uint8_t *)(maca_dmarx+1))) && 
    296                    ((0xFF) == *((uint8_t *)(maca_dmarx+2)))){
   \       0xDA   0x6F70             LDR      R0,[R6, #+116]
   \       0xDC   0x1C40             ADDS     R0,R0,#+1
   \       0xDE   0x7800             LDRB     R0,[R0, #+0]
   \       0xE0   0x287E             CMP      R0,#+126
   \       0xE2   0xD104             BNE      ??MACA_Interrupt_22
   \       0xE4   0x6F70             LDR      R0,[R6, #+116]
   \       0xE6   0x1C80             ADDS     R0,R0,#+2
   \       0xE8   0x7800             LDRB     R0,[R0, #+0]
   \       0xEA   0x28FF             CMP      R0,#+255
   \       0xEC   0xD003             BEQ      ??MACA_Interrupt_21
    297          #else
    298          		if( ((0x7E) == *((uint8_t *)(maca_dmarx+2))) && 
    299          			((0xFF) == *((uint8_t *)(maca_dmarx+3)))){
    300          #endif
    301                  gRadioEvntFlags.Bits.data_indication_flag = TRUE;
    302                  gRadioEvntFlags.Bits.action_complete_flag = TRUE;
    303                  gRadioEvntFlags.Bits.ac_success_flag = TRUE;
    304                  execute_current_message_callback();
    305                }
    306                else{
    307                  gRadioEvntFlags.Bits.ac_not_completed_flag = TRUE;
   \                     ??MACA_Interrupt_22: (+1)
   \       0xEE   0x6828             LDR      R0,[R5, #+0]
   \       0xF0   0x2180             MOVS     R1,#+128
   \       0xF2   0x02C9             LSLS     R1,R1,#+11       ;; #+262144
   \       0xF4   0xE016             B.N      ??MACA_Interrupt_8
    308                }
    309              }
    310              else{
    311                gRadioEvntFlags.Bits.data_indication_flag = TRUE;
    312                gRadioEvntFlags.Bits.action_complete_flag = TRUE;
    313                gRadioEvntFlags.Bits.ac_success_flag = TRUE;
   \                     ??MACA_Interrupt_21: (+1)
   \       0xF6   0x6828             LDR      R0,[R5, #+0]
   \       0xF8   0x2170             MOVS     R1,#+112
   \       0xFA   0x4301             ORRS     R1,R1,R0
   \       0xFC   0x6029             STR      R1,[R5, #+0]
    314                execute_current_message_callback();
   \       0xFE   0x....'....        BL       execute_current_message_callback
   \      0x102   0xE016             B        ??MACA_Interrupt_5
    315              }
    316            }
    317            else if( _is_filter_failed_interrupt(irqSrc))
   \                     ??MACA_Interrupt_20: (+1)
   \      0x104   0x0522             LSLS     R2,R4,#+20
   \      0x106   0xD505             BPL      ??MACA_Interrupt_23
    318            {
    319              /* Prevent MACA lock-up and prepare the event to inject on aborted or not_completed irq */
    320              ResumeMACASync(); 
   \      0x108   0x....'....        BL       ResumeMACASync
    321              gRadioEvntFlags.Bits.filter_failed_flag = TRUE;
   \      0x10C   0x6828             LDR      R0,[R5, #+0]
   \      0x10E   0x2180             MOVS     R1,#+128
   \      0x110   0x0349             LSLS     R1,R1,#+13       ;; #+1048576
   \      0x112   0xE007             B.N      ??MACA_Interrupt_8
    322            }
    323            
    324            else if(_is_sync_detected_interrupt(irqSrc)){
   \                     ??MACA_Interrupt_23: (+1)
   \      0x114   0x0462             LSLS     R2,R4,#+17
   \      0x116   0xD501             BPL      ??MACA_Interrupt_24
    325              gRadioEvntFlags.Bits.sync_detected_flag = TRUE;
   \      0x118   0x2102             MOVS     R1,#+2
   \      0x11A   0xE003             B.N      ??MACA_Interrupt_8
    326            }
    327            else if(_is_a_timeout_interrupt(irqSrc)){
   \                     ??MACA_Interrupt_24: (+1)
   \      0x11C   0x2290             MOVS     R2,#+144
   \      0x11E   0x0192             LSLS     R2,R2,#+6        ;; #+9216
   \      0x120   0x4022             ANDS     R2,R2,R4
   \      0x122   0xD002             BEQ      ??MACA_Interrupt_25
    328              gRadioEvntFlags.Bits.timeout_flag = TRUE;
   \                     ??MACA_Interrupt_8: (+1)
   \      0x124   0x4301             ORRS     R1,R1,R0
   \      0x126   0x6029             STR      R1,[R5, #+0]
   \      0x128   0xE003             B        ??MACA_Interrupt_5
    329            }
    330            else if(_is_fifo_level_interrupt(irqSrc)){
   \                     ??MACA_Interrupt_25: (+1)
   \      0x12A   0x05A0             LSLS     R0,R4,#+22
   \      0x12C   0xD501             BPL      ??MACA_Interrupt_5
    331              ResumeMACASync();
   \                     ??MACA_Interrupt_19: (+1)
   \      0x12E   0x....'....        BL       ResumeMACASync
    332            }
    333            if(_is_reset_interrupt(irqSrc)){
    334            }
    335            if(_is_an_unused_interrupt(irqSrc)){
    336             }
    337           
    338          
    339            else {
    340            }
    341            mMacaIsrEntryCounter--;
   \                     ??MACA_Interrupt_5: (+1)
   \      0x132   0x....             LDR      R0,??DataTable1_6
   \      0x134   0x7801             LDRB     R1,[R0, #+0]
   \      0x136   0x1E49             SUBS     R1,R1,#+1
   \      0x138   0x7001             STRB     R1,[R0, #+0]
    342          }
   \      0x13A   0xBCF1             POP      {R0,R4-R7}
   \      0x13C   0xBC08             POP      {R3}
   \      0x13E   0x4718             BX       R3               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x8000'9204        DC32     0x80009204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x8000'9300        DC32     0x80009300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x8000'400C        DC32     0x8000400c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x0000'FFFF        DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x8000'40C4        DC32     0x800040c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x8000'40C0        DC32     0x800040c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x....'....        DC32     mMacaIsrEntryCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x....'....        DC32     gRadioEvntFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0x0000'1001        DC32     0x1001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x0000'0201        DC32     0x201
    343          
    344          
    345          
    346          /************************************************************************************
    347          *************************************************************************************
    348          * Private Debug stuff
    349          *************************************************************************************
    350          ************************************************************************************/
    351          
    352          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   MACA_Interrupt
        24   -> MLMEGetPromiscuousMode
        24   -> ResumeMACASync
        24   -> execute_current_message_callback
      24   ResumeMACASync
        24   -> ITC_DisableInterrupt
        24   -> ITC_EnableInterrupt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
     320  MACA_Interrupt
     118  ResumeMACASync
       2  mMacaIsrEntryCounter
          flag

 
   2 bytes in section .bss
 478 bytes in section .text
 
 478 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
