###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         31/Jan/2019  14:41:04
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Source\TransceiverPowerMngmnt.c
#    Command line =  
#        -f C:\Users\Brus\AppData\Local\Temp\EWFCA8.tmp
#        (D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Source\TransceiverPowerMngmnt.c
#        -D NDEBUG -D F24MHZ -D SECURITY_ENABLED -D MC13226Included_d=0
#        --preprocess=cs
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List -lC
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List -lB
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List
#        --diag_suppress Pe940,Pe951,Pe911 -o
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\Obj
#        --endian=little --cpu=ARM7TDMI-S --fpu=None --dlib_config
#        "C:\HDDPrograms\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Drivers\Interface\
#        -I D:\Users\Brus\Documents\repeater_test\Repeater\PLM\Interface\
#        --cpu_mode thumb -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List\TransceiverPowerMngmnt.lst
#    Object file  =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\Obj\TransceiverPowerMngmnt.o
#
###############################################################################

D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Source\TransceiverPowerMngmnt.c
      1          /************************************************************************************
      2          * Transceiver Power Management implementation
      3          *
      4          * (c) Copyright 2006, Freescale, Inc.  All rights reserved.
      5          *
      6          * No part of this document must be reproduced in any form - including copied,
      7          * transcribed, printed or by any electronic means - without specific written
      8          * permission from Freescale.
      9          *
     10          * Last Inspected: 01/11/2007
     11          * Last Tested:
     12          ************************************************************************************/
     13          
     14          #include "../Interface/TransceiverPowerMngmnt.h"
     15          #include "../Drivers/LibInterface/rif_inc.h"
     16          #include "../../PLM/LibInterface/Platform.h"
     17          #include "../../PLM/LibInterface/CRM_Regs.h"
     18          
     19          
     20          /************************************************************************************
     21          *************************************************************************************
     22          * Private macros
     23          *************************************************************************************
     24          ************************************************************************************/
     25          #define gExtWuKBI_c           (gExtWuKBI4En_c | gExtWuKBI5En_c | gExtWuKBI6En_c | gExtWuKBI7En_c)
     26          #define crm_sleep_cntl_st     ((crm_sleep_cntl_t *)(&crm_sleep_cntl))
     27          #define _set_ram_ret_size(x)  (crm_sleep_cntl_st->Bits.RAM_RET = x)
     28          #define _set_mcu_ret_state(x) (crm_sleep_cntl_st->Bits.MCU_RET = x)
     29          
     30          
     31          /************************************************************************************
     32          *************************************************************************************
     33          * Private prototypes
     34          *************************************************************************************
     35          ************************************************************************************/
     36          void CrmGoToSleep(SleepCtrl_t* pSleepCtrl);
     37          
     38          
     39          /************************************************************************************
     40          *************************************************************************************
     41          * Private type definitions
     42          *************************************************************************************
     43          ************************************************************************************/
     44          #define mMaxKBI_c                (0x0F)
     45          #define mMaxWakeupSource_c       (0xF3)
     46          #define mWuKBIShiftSize_c        (0x04)
     47          #define mNoWakeupSource_c        (0x00)
     48          #define mRam_Ret_Size_c          (0x11)
     49          #define mMCU_Ret_Enable_c        (0x01)
     50          #define mMCU_Ret_Disable_c       (0x00)
     51          /************************************************************************************
     52          *************************************************************************************
     53          * Private memory declarations
     54          *************************************************************************************
     55          ************************************************************************************/
     56          
     57          /************************************************************************************
     58          *************************************************************************************
     59          * Public functions
     60          *************************************************************************************
     61          ************************************************************************************/
     62          
     63          /************************************************************************************
     64          * SetWakeupTimerTimeout
     65          *
     66          * This function is used to set the timeout value for a specific clock.
     67          *
     68          ************************************************************************************/
     69          

   \                                 In section .text, align 2, keep-with-next
     70          FuncReturn_t SetWakeupTimerTimeout(clock_config_t u8Clock, uint32_t u32TimeOut){
   \                     SetWakeupTimerTimeout: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0002             MOVS     R2,R0
     71          
     72            FuncReturn_t retTmp;  
     73          
     74            if(gTimerWakeup_c==u8Clock)
   \        0x4   0x....             LDR      R3,??DataTable1  ;; 0x80003024
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x0014             MOVS     R4,R2
   \        0xA   0xD101             BNE      ??SetWakeupTimerTimeout_0
     75            {
     76              CRM_REGS_P->WuTimeout = u32TimeOut;
   \        0xC   0x6019             STR      R1,[R3, #+0]
     77              retTmp = gSuccess_c;
   \        0xE   0xE004             B        ??SetWakeupTimerTimeout_1
     78            }
     79            else
     80            {
     81              if(gRTCWakeup_c!=u8Clock)
   \                     ??SetWakeupTimerTimeout_0: (+1)
   \       0x10   0x2A01             CMP      R2,#+1
   \       0x12   0xD001             BEQ      ??SetWakeupTimerTimeout_2
     82              {
     83                retTmp = gFailOutOfRange_c;
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0xE000             B        ??SetWakeupTimerTimeout_1
     84              }
     85              else
     86              {
     87                CRM_RTCSetTimeout(u32TimeOut); 
   \                     ??SetWakeupTimerTimeout_2: (+1)
   \       0x18   0x6099             STR      R1,[R3, #+8]
     88                retTmp = gSuccess_c;
     89              }
     90            }
     91            return retTmp;
   \                     ??SetWakeupTimerTimeout_1: (+1)
   \       0x1A   0xBC10             POP      {R4}
   \       0x1C   0x4770             BX       LR               ;; return
     92          }
     93          
     94          
     95          /************************************************************************************
     96          * MLMESetWakeupSource
     97          *
     98          * This function configures the device auto wake up capability. Three types of wakeups 
     99          * are possible: 1) An external wakeup signal though 4 pads, 2) An internal time wake up 
    100          * and 3)A Real Time Clock timeout.
    101          *
    102          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          FuncReturn_t MLMESetWakeupSource(uint8_t u8Mode, uint8_t u8KBIPol,uint8_t u8KBIEdge)
    104          {
   \                     MLMESetWakeupSource: (+1)
   \        0x0   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \        0x2   0xB083             SUB      SP,SP,#+12
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x0017             MOVS     R7,R2
    105            FuncReturn_t tmpRteurn;
    106            crmWuCtrl_t WuCtrl;
    107            u8Mode &= mMaxWakeupSource_c;
    108          
    109            tmpRteurn = gFailNoValidCondition_c;
   \        0x8   0x2503             MOVS     R5,#+3
   \        0xA   0x2003             MOVS     R0,#+3
    110          
    111            if(gNull_c != (u8Mode & gTimerWuEn_c))
   \        0xC   0x2600             MOVS     R6,#+0
   \        0xE   0x07E1             LSLS     R1,R4,#+31
   \       0x10   0xD509             BPL      ??MLMESetWakeupSource_0
    112            { 
    113                 WuCtrl.wuSource = gTimerWu_c;
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0x7008             STRB     R0,[R1, #+0]
    114                 WuCtrl.TIMER_WU_EN = 1;
    115                 WuCtrl.TIMER_WU_INT_EN = 1;
   \       0x18   0x9801             LDR      R0,[SP, #+4]
   \       0x1A   0x4328             ORRS     R0,R0,R5
   \       0x1C   0x9001             STR      R0,[SP, #+4]
    116                 CRM_WuCntl(&WuCtrl);
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x....'....        BL       CRM_WuCntl
    117                 tmpRteurn = gSuccess_c;
   \       0x24   0x2000             MOVS     R0,#+0
    118            }
    119            else
    120            {
    121                //Do nothing
    122            }
    123          
    124            if(gNull_c != (u8Mode & gRTCWuEn_c))
   \                     ??MLMESetWakeupSource_0: (+1)
   \       0x26   0x2102             MOVS     R1,#+2
   \       0x28   0x420C             TST      R4,R1
   \       0x2A   0xD008             BEQ      ??MLMESetWakeupSource_1
    125            { 
    126               WuCtrl.wuSource = gRtcWu_c;
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x7001             STRB     R1,[R0, #+0]
    127               WuCtrl.RTC_WU_EN = 1;
    128               WuCtrl.RTC_WU_INT_EN = 1;
   \       0x30   0x9801             LDR      R0,[SP, #+4]
   \       0x32   0x4305             ORRS     R5,R5,R0
   \       0x34   0x9501             STR      R5,[SP, #+4]
    129               CRM_WuCntl(&WuCtrl); 
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x....'....        BL       CRM_WuCntl
    130               tmpRteurn = gSuccess_c;
   \       0x3C   0x2000             MOVS     R0,#+0
    131            }
    132            else{
    133                //Do nothing
    134            }
    135          
    136            if(gNull_c != (u8Mode & gExtWuKBI_c))
   \                     ??MLMESetWakeupSource_1: (+1)
   \       0x3E   0x21F0             MOVS     R1,#+240
   \       0x40   0x4021             ANDS     R1,R1,R4
   \       0x42   0xD016             BEQ      ??MLMESetWakeupSource_2
   \       0x44   0x4668             MOV      R0,SP
   \       0x46   0x7C00             LDRB     R0,[R0, #+16]
    137            {
    138               u8Mode &= gExtWuKBI_c;
    139               WuCtrl.wuSource = gExtWu_c;
   \       0x48   0x4669             MOV      R1,SP
   \       0x4A   0x700E             STRB     R6,[R1, #+0]
    140               WuCtrl.KBI_WU_EN = (u8Mode >> 4); 
    141               WuCtrl.KBI_INT_EN = (u8Mode >> 4);
    142               WuCtrl.KBI_WU_POL = (u8KBIPol & mMaxKBI_c);
    143               WuCtrl.KBI_WU_EVENT =(u8KBIEdge & mMaxKBI_c);
   \       0x4C   0x0921             LSRS     R1,R4,#+4
   \       0x4E   0x230F             MOVS     R3,#+15
   \       0x50   0x9A01             LDR      R2,[SP, #+4]
   \       0x52   0x0C12             LSRS     R2,R2,#+16
   \       0x54   0x0412             LSLS     R2,R2,#+16
   \       0x56   0x4018             ANDS     R0,R0,R3
   \       0x58   0x0200             LSLS     R0,R0,#+8
   \       0x5A   0x403B             ANDS     R3,R3,R7
   \       0x5C   0x011B             LSLS     R3,R3,#+4
   \       0x5E   0x4303             ORRS     R3,R3,R0
   \       0x60   0x430B             ORRS     R3,R3,R1
   \       0x62   0x0308             LSLS     R0,R1,#+12
   \       0x64   0x4318             ORRS     R0,R0,R3
   \       0x66   0x4310             ORRS     R0,R0,R2
   \       0x68   0x9001             STR      R0,[SP, #+4]
    144               CRM_WuCntl(&WuCtrl); 
   \       0x6A   0x4668             MOV      R0,SP
   \       0x6C   0x....'....        BL       CRM_WuCntl
    145               tmpRteurn = gSuccess_c;
   \       0x70   0x2000             MOVS     R0,#+0
    146            }
    147            else{
    148              //Do nothing/
    149            }
    150          
    151            return tmpRteurn;
   \                     ??MLMESetWakeupSource_2: (+1)
   \       0x72   0xB005             ADD      SP,SP,#+20
   \       0x74   0xBCF0             POP      {R4-R7}
   \       0x76   0xBC08             POP      {R3}
   \       0x78   0x4718             BX       R3               ;; return
    152          }
    153          
    154          
    155          
    156          /************************************************************************************
    157          * MLMEGetConfiguredWakeupSource
    158          *
    159          * Return the wake up sources that were configured through the MLMESetWakeSource 
    160          * fucntion.
    161          *
    162          ************************************************************************************/
    163          

   \                                 In section .text, align 2, keep-with-next
    164          uint8_t GetConfiguredWakeupSource(void){
    165            uint8_t u8Mode = 0;
    166            u8Mode = CRM_REGS_P->WuCntl;
   \                     GetConfiguredWakeupSource: (+1)
   \        0x0   0x....             LDR      R0,??DataTable1_1  ;; 0x80003004
   \        0x2   0x6801             LDR      R1,[R0, #+0]
    167            u8Mode &= mMaxWakeupSource_c; 
    168            return u8Mode;
   \        0x4   0x20F3             MOVS     R0,#+243
   \        0x6   0x4008             ANDS     R0,R0,R1
   \        0x8   0x4770             BX       LR               ;; return
    169          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x8000'3024        DC32     0x80003024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x8000'3004        DC32     0x80003004
    170          
    171          #if (gUseLowPowerMode_c)
    172          /************************************************************************************
    173          * MLMEHibernateRequest
    174          *
    175          * This function places the device into Hibernate mode and permit to configure a clock
    176          *for hibernate mode (XTAL32kHz or RINGOSC2kHz)
    177          *
    178          ************************************************************************************/
    179          FuncReturn_t MLMEHibernateRequest(uint8_t u8HibClock, crmSleepCtrl_t SleepCtl)
    180          {
    181            if(mNoWakeupSource_c == GetConfiguredWakeupSource){
    182                return gFailNoValidCondition_c;
    183            }
    184            else{
    185              // Do nothing 
    186            }
    187            if(gXtal32khz_c != u8HibClock) {
    188              if(gRingOsc2khz_c != u8HibClock){
    189                return gFailOutOfRange_c;
    190              }
    191              else{
    192                // Do nothing 
    193              }
    194            }
    195            else {
    196              CRM_2kToXtal32Switch(TRUE, NULL); 
    197            }
    198            
    199            SleepCtl.sleepType = gHibernate_c;
    200            CRM_GoToSleep(&SleepCtl);
    201            return gSuccess_c;
    202          }
    203          
    204          /************************************************************************************
    205          * MLMEDozeRequest
    206          *
    207          * This function places the device into Doze mode and verify that any Wake up 
    208          *Source had been enabled unless.
    209          *
    210          ************************************************************************************/
    211          FuncReturn_t MLMEDozeRequest(crmSleepCtrl_t SleepCtl)
    212          {
    213            if(mNoWakeupSource_c == GetConfiguredWakeupSource()){
    214              return gFailNoValidCondition_c;
    215            }
    216            else{
    217              SleepCtl.sleepType = gDoze_c;
    218           
    219              CRM_GoToSleep(&SleepCtl);
    220            }
    221            return gSuccess_c;
    222          }
    223          
    224          #endif
    225          
    226          /************************************************************************************
    227          *************************************************************************************
    228          * Private functions
    229          *************************************************************************************
    230          ************************************************************************************/
    231          
    232          
    233          /************************************************************************************
    234          *************************************************************************************
    235          * Private Debug stuff
    236          *************************************************************************************
    237          ************************************************************************************/
    238          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GetConfiguredWakeupSource
      40   MLMESetWakeupSource
        40   -> CRM_WuCntl
       4   SetWakeupTimerTimeout


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      10  GetConfiguredWakeupSource
     122  MLMESetWakeupSource
      30  SetWakeupTimerTimeout

 
 170 bytes in section .text
 
 170 bytes of CODE memory

Errors: none
Warnings: none
