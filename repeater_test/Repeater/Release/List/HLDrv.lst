###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         31/Jan/2019  14:41:03
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Source\HLDrv.c
#    Command line =  
#        -f C:\Users\Brus\AppData\Local\Temp\EWF8D5.tmp
#        (D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Source\HLDrv.c -D
#        NDEBUG -D F24MHZ -D SECURITY_ENABLED -D MC13226Included_d=0
#        --preprocess=cs
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List -lC
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List -lB
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List
#        --diag_suppress Pe940,Pe951,Pe911 -o
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\Obj
#        --endian=little --cpu=ARM7TDMI-S --fpu=None --dlib_config
#        "C:\HDDPrograms\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Drivers\Interface\
#        -I D:\Users\Brus\Documents\repeater_test\Repeater\PLM\Interface\
#        --cpu_mode thumb -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\List\HLDrv.lst
#    Object file  =  
#        D:\Users\Brus\Documents\repeater_test\Repeater\Release\Obj\HLDrv.o
#
###############################################################################

D:\Users\Brus\Documents\repeater_test\Repeater\SMAC\Source\HLDrv.c
      1          /************************************************************************************
      2          * High Level Drivers implementation
      3          *
      4          * (c) Copyright 2006, Freescale, Inc.  All rights reserved.
      5          *
      6          * No part of this document must be reproduced in any form - including copied,
      7          * transcribed, printed or by any electronic means - without specific written
      8          * permission from Freescale.
      9          *
     10          * Last Inspected: 01/25/2007
     11          * Last Tested:
     12          ************************************************************************************/
     13          
     14          #include "../../PLM/LibInterface/Crm.h"
     15          #include "../Interface/HLDrv.h"
     16          
     17          /************************************************************************************
     18          *************************************************************************************
     19          * Private macros
     20          *************************************************************************************
     21          ************************************************************************************/
     22          
     23          #define countsWaiting     1000
     24          
     25          #define isTimingRefInvalid()        ( gMaxRtcTimingReference_c <= mTimingRef )
     26          #define isClkToConfigInvalid()      ( gMaxClkToConfig_c <= mClkToConfig )
     27          #define isRegisterToConfigInvalid() ( gMaxPowerRegisterToConfig_c <= mRegisterToConfig )
     28          
     29          /************************************************************************************
     30          *************************************************************************************
     31          * Private prototypes
     32          *************************************************************************************
     33          ************************************************************************************/
     34          
     35          /************************************************************************************
     36          *************************************************************************************
     37          * Private type definitions
     38          *************************************************************************************
     39          ************************************************************************************/
     40          
     41          /************************************************************************************
     42          *************************************************************************************
     43          * Private memory declarations
     44          *************************************************************************************
     45          ************************************************************************************/
     46          
     47          /************************************************************************************
     48          *************************************************************************************
     49          * Public functions
     50          *************************************************************************************
     51          ************************************************************************************/
     52          
     53          /************************************************************************************
     54          * DRVConfigureRTC
     55          *
     56          * This primitive lets configure the Real Time Clock (RTC) for call back 
     57          * function after some timeout and the reference clock for the RTC.
     58          *
     59          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     60          FuncReturn_t DRVConfigureRTC(crm_rtc_timingReference_t mTimingRef, uint32_t mTimeout, callback_t pfUserCallbackFn){
   \                     DRVConfigureRTC: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
     61          
     62            if ( isTimingRefInvalid() ) {
   \        0x2   0x2802             CMP      R0,#+2
   \        0x4   0xDA01             BGE      ??DRVConfigureRTC_0
   \        0x6   0x0014             MOVS     R4,R2
     63              return gFailOutOfRange_c;
     64            }
     65            else if ( NULL == pfUserCallbackFn ){
   \        0x8   0xD101             BNE      ??DRVConfigureRTC_1
     66              return gFailOutOfRange_c;
   \                     ??DRVConfigureRTC_0: (+1)
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE01E             B        ??DRVConfigureRTC_2
     67            }
     68          
     69            CRM_RTCSetTimeout(mTimeout);
   \                     ??DRVConfigureRTC_1: (+1)
   \        0xE   0x....             LDR      R5,??DataTable0  ;; 0x80003004
   \       0x10   0x62A9             STR      R1,[R5, #+40]
     70            
     71            if ( gTimerRef_2Khz_c == mTimingRef ) {
   \       0x12   0x0001             MOVS     R1,R0
   \       0x14   0xD108             BNE      ??DRVConfigureRTC_3
     72              CRM_RingOscillatorEnable();
   \       0x16   0x6BA8             LDR      R0,[R5, #+56]
   \       0x18   0x2101             MOVS     R1,#+1
   \       0x1A   0x4301             ORRS     R1,R1,R0
   \       0x1C   0x63A9             STR      R1,[R5, #+56]
     73              CRM_Xtal32Disable();
   \       0x1E   0x6C28             LDR      R0,[R5, #+64]
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x4388             BICS     R0,R0,R1
   \       0x24   0x6428             STR      R0,[R5, #+64]
   \       0x26   0xE004             B        ??DRVConfigureRTC_4
     74            }
     75            else if (gTimerRef_32Khz_c == mTimingRef) {
   \                     ??DRVConfigureRTC_3: (+1)
   \       0x28   0x2801             CMP      R0,#+1
   \       0x2A   0xD102             BNE      ??DRVConfigureRTC_4
     76              CRM_2kToXtal32Switch(TRUE, NULL); 
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0x....'....        BL       CRM_2kToXtal32Switch
     77            }
     78            else {
     79              /* Do nothing */
     80            }
     81            if (CRM_RegisterISR(gCrmRTCWuEvent_c, pfUserCallbackFn) == gCrmErrNoError_c) 
   \                     ??DRVConfigureRTC_4: (+1)
   \       0x32   0x0021             MOVS     R1,R4
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0x....'....        BL       CRM_RegisterISR
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD105             BNE      ??DRVConfigureRTC_5
     82            {
     83              CRM_RTCInterruptEnable();
   \       0x3E   0x6828             LDR      R0,[R5, #+0]
   \       0x40   0x0BA9             LSRS     R1,R5,#+14
   \       0x42   0x4301             ORRS     R1,R1,R0
   \       0x44   0x6029             STR      R1,[R5, #+0]
     84              return gSuccess_c;
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xE000             B        ??DRVConfigureRTC_2
     85            }
     86            else {
     87               return gFail_c;
   \                     ??DRVConfigureRTC_5: (+1)
   \       0x4A   0x2009             MOVS     R0,#+9
   \                     ??DRVConfigureRTC_2: (+1)
   \       0x4C   0xBC32             POP      {R1,R4,R5}
   \       0x4E   0xBC08             POP      {R3}
   \       0x50   0x4718             BX       R3               ;; return
     88            }
     89          }
     90          
     91          /************************************************************************************
     92          * DRVSetPowerSorce
     93          *
     94          * This function sets the power power configuration for the MCU. This settings are 
     95          * retainded during sleep modes.
     96          *
     97          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     98          FuncReturn_t DRVSetPowerSource(crmPowerSource_t pwSource)
     99          {
   \                     DRVSetPowerSource: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    100            if(gCrmErrNoError_c == CRM_SetPowerSource(pwSource))
   \        0x2   0x....'....        BL       CRM_SetPowerSource
   \        0x6   0x....             B.N      ?Subroutine0
    101            {
    102              return gSuccess_c;
    103            }
    104            else
    105            {
    106              return gFail_c;
    107            }
    108          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD000             BEQ      ??Subroutine0_0
   \        0x4   0x2009             MOVS     R0,#+9
   \                     ??Subroutine0_0: (+1)
   \        0x6   0xBC0A             POP      {R1,R3}
   \        0x8   0x4718             BX       R3               ;; return
    109          
    110          /************************************************************************************
    111          * DRVConfigureVoltageRegTrimm
    112          *
    113          * This function is called to adjust the behavior of the specific device.
    114          *
    115          ************************************************************************************/
    116          

   \                                 In section .text, align 2, keep-with-next
    117          FuncReturn_t DRVConfigureVolageRegTrimm(crmTrimmedDevice_t trimmedDevice,uint8_t trimmValue)
    118          {
   \                     DRVConfigureVolageRegTrimm: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    119            if(gCrmErrNoError_c == CRM_VRegTrimm(trimmedDevice,trimmValue))
   \        0x2   0x....'....        BL       CRM_VRegTrimm
   \        0x6                      REQUIRE ?Subroutine0
   \        0x6                      ;; // Fall through to label ?Subroutine0
    120            {
    121              return gSuccess_c;
    122            }
    123            else 
    124            {
    125              return gFail_c;
    126            }
    127          }
    128          
    129          /************************************************************************************
    130          * DRVConfigureVoltageControl
    131          *
    132          * This function is called to configure one of the following three voltage regulators:
    133          * Bulk Voltage regulator, 1.5 voltage regulator or 1.8 voltage regulator.
    134          *
    135          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    136          FuncReturn_t DRVConfigureVoltageControl(crmVRegCntl_t* pVRegCntl)
    137          {
   \                     DRVConfigureVoltageControl: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    138            if(gCrmErrNoError_c == CRM_VRegCntl(pVRegCntl))
   \        0x2   0x....'....        BL       CRM_VRegCntl
   \        0x6   0x....             B.N      ?Subroutine0
    139            {
    140              return gSuccess_c;
    141            }
    142            else  
    143            {
    144              return gFail_c;
    145            }
    146          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0x8000'3004        DC32     0x80003004
    147          
    148          
    149          /************************************************************************************
    150          *************************************************************************************
    151          * Private functions
    152          *************************************************************************************
    153          ************************************************************************************/
    154          
    155          /************************************************************************************
    156          *************************************************************************************
    157          * Private Debug stuff
    158          *************************************************************************************
    159          ************************************************************************************/
    160          
    161          
    162          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   DRVConfigureRTC
        16   -> CRM_2kToXtal32Switch
        16   -> CRM_RegisterISR
       8   DRVConfigureVolageRegTrimm
         8   -> CRM_VRegTrimm
       8   DRVConfigureVoltageControl
         8   -> CRM_VRegCntl
       8   DRVSetPowerSource
         8   -> CRM_SetPowerSource


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      10  ?Subroutine0
      82  DRVConfigureRTC
       6  DRVConfigureVolageRegTrimm
       8  DRVConfigureVoltageControl
       8  DRVSetPowerSource

 
 118 bytes in section .text
 
 118 bytes of CODE memory

Errors: none
Warnings: none
