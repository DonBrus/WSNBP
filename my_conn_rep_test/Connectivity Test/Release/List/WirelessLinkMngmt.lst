###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         31/Jan/2019  15:13:43
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        D:\Users\Brus\Documents\my_conn_test\Connectivity
#        Test\SMAC\Source\WirelessLinkMngmt.c
#    Command line =  
#        -f C:\Users\Brus\AppData\Local\Temp\EWE0D2.tmp
#        ("D:\Users\Brus\Documents\my_conn_test\Connectivity
#        Test\SMAC\Source\WirelessLinkMngmt.c" -D NDEBUG -D F24MHZ -D
#        SECURITY_ENABLED -D MC13226Included_d=0 --preprocess=cs
#        "D:\Users\Brus\Documents\my_conn_test\Connectivity Test\Release\List"
#        -lC "D:\Users\Brus\Documents\my_conn_test\Connectivity
#        Test\Release\List" -lB
#        "D:\Users\Brus\Documents\my_conn_test\Connectivity Test\Release\List"
#        --diag_suppress Pe940,Pe951,Pe911 -o
#        "D:\Users\Brus\Documents\my_conn_test\Connectivity Test\Release\Obj"
#        --endian=little --cpu=ARM7TDMI-S --fpu=None --dlib_config
#        "C:\HDDPrograms\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        "D:\Users\Brus\Documents\my_conn_test\Connectivity
#        Test\SMAC\Drivers\Interface\" -I
#        "D:\Users\Brus\Documents\my_conn_test\Connectivity
#        Test\PLM\Interface\" --cpu_mode thumb -Ohz --use_c++_inline)
#    Locale       =  C
#    List file    =  
#        D:\Users\Brus\Documents\my_conn_test\Connectivity
#        Test\Release\List\WirelessLinkMngmt.lst
#    Object file  =  
#        D:\Users\Brus\Documents\my_conn_test\Connectivity
#        Test\Release\Obj\WirelessLinkMngmt.o
#
###############################################################################

D:\Users\Brus\Documents\my_conn_test\Connectivity Test\SMAC\Source\WirelessLinkMngmt.c
      1          /************************************************************************************
      2          * Wireless Link Management implementation
      3          *
      4          * (c) Copyright 2007, Freescale, Inc.  All rights reserved.
      5          *
      6          * No part of this document must be reproduced in any form - including copied,
      7          * transcribed, printed or by any electronic means - without specific written
      8          * permission from Freescale.
      9          *
     10          ************************************************************************************/
     11          
     12          #include "../Interface/WirelessLinkMngmt.h"
     13          #include "../Interface/RadioManagement.h"
     14          #include "RadioMngmntWrapper.h"
     15          #include "../Drivers/Interface/ghdr/rcv_spi_regs.h"
     16          #include "../Drivers/LibInterface/rif_inc.h"
     17          #include "../Drivers/LibInterface/Synthesizer_inc.h"
     18          #include "../../PLM/Interface/RF_Config.h"
     19          
     20          
     21          /************************************************************************************
     22          *************************************************************************************
     23          * Private macros
     24          *************************************************************************************
     25          ************************************************************************************/
     26          
     27          /************************************************************************************
     28          *************************************************************************************
     29          * Private prototypes
     30          *************************************************************************************
     31          ************************************************************************************/
     32          
     33          /************************************************************************************
     34          *************************************************************************************
     35          * Private type definitions
     36          *************************************************************************************
     37          ************************************************************************************/
     38          
     39          /************************************************************************************
     40          *************************************************************************************
     41          * Private memory declarations
     42          *************************************************************************************
     43          ************************************************************************************/
     44          
     45          /************************************************************************************
     46          *************************************************************************************
     47          * Public functions
     48          *************************************************************************************
     49          ************************************************************************************/
     50          
     51          /************************************************************************************
     52          * MCPSDataRequest
     53          *
     54          * This data primitive is used to send a SMAC packet.
     55          *
     56          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     57          FuncReturn_t MCPSDataRequest (message_t *msg)
     58          {
   \                     MCPSDataRequest: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     59            set_pmsg_as_transmission(msg);
   \        0x2   0x7801             LDRB     R1,[R0, #+0]
   \        0x4   0x22F8             MOVS     R2,#+248
   \        0x6   0x400A             ANDS     R2,R2,R1
   \        0x8   0x7002             STRB     R2,[R0, #+0]
     60            set_pmsg_state(msg, MSG_TX_RQST);
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x7001             STRB     R1,[R0, #+0]
     61            insert_codebytes_to_pmsg(msg);
   \        0xE   0x217E             MOVS     R1,#+126
   \       0x10   0x6842             LDR      R2,[R0, #+4]
   \       0x12   0x7011             STRB     R1,[R2, #+0]
   \       0x14   0x21FF             MOVS     R1,#+255
   \       0x16   0x6842             LDR      R2,[R0, #+4]
   \       0x18   0x7051             STRB     R1,[R2, #+1]
     62            return handle_new_message(msg, gNull_c);
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0x....             B.N      ?Subroutine0
     63          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x....'....        BL       handle_new_message
   \        0x4   0xBC0A             POP      {R1,R3}
   \        0x6   0x4718             BX       R3               ;; return
     64          
     65          /************************************************************************************
     66          * MLMESetChannelRequest
     67          *
     68          * This primitive is used to set the frequency where the MC1322X will operate.
     69          *
     70          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     71          FuncReturn_t MLMESetChannelRequest (channel_num_t u8channel)
     72          {
   \                     MLMESetChannelRequest: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     73            if(MAX_CHAN_NUM < u8channel){
   \        0x2   0x2810             CMP      R0,#+16
   \        0x4   0xDB01             BLT      ??MLMESetChannelRequest_0
     74              return gFailOutOfRange_c;   
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0xE009             B        ??MLMESetChannelRequest_1
     75            }
     76            else {
     77              if(gSuccess_c != _set_channel(u8channel))
   \                     ??MLMESetChannelRequest_0: (+1)
   \        0xA   0x....             LDR      R2,??DataTable3
   \        0xC   0x0083             LSLS     R3,R0,#+2
   \        0xE   0x58D2             LDR      R2,[R2, R3]
   \       0x10   0x....             LDR      R3,??DataTable3_1
   \       0x12   0x5C19             LDRB     R1,[R3, R0]
   \       0x14   0x....'....        BL       SetChannel
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD000             BEQ      ??MLMESetChannelRequest_1
     78                return gFailNoValidCondition_c;
   \       0x1C   0x2003             MOVS     R0,#+3
     79            }
     80            return gSuccess_c;
   \                     ??MLMESetChannelRequest_1: (+1)
   \       0x1E   0xBC0A             POP      {R1,R3}
   \       0x20   0x4718             BX       R3               ;; return
     81          }
     82          
     83          /************************************************************************************
     84          * MLMEGetChannelRequest
     85          *
     86          * This primitive returns the channel number where the MC1322X is operating.
     87          *
     88          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     89          uint8_t MLMEGetChannelRequest (void)
     90          {
   \                     MLMEGetChannelRequest: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     91            return GetCurrentChannel(gaRFSynVCODivI_c, gaRFSynVCODivF_c);
   \        0x2   0x....             LDR      R1,??DataTable3
   \        0x4   0x....             LDR      R0,??DataTable3_1
   \        0x6   0x....'....        BL       GetCurrentChannel
   \        0xA   0xBC0A             POP      {R1,R3}
   \        0xC   0x4718             BX       R3               ;; return
     92          }
     93          
     94          /************************************************************************************
     95          * MLMERXEnableRequest
     96          *
     97          * This function enables the MC1322X for a packet reception with or without a 
     98          * timeout using the 250 KHz clock.
     99          *
    100          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    101          FuncReturn_t MLMERXEnableRequest (message_t *msg, uint32_t timeout)
    102          {
   \                     MLMERXEnableRequest: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    103            set_pmsg_as_reception(msg);
   \        0x2   0x7802             LDRB     R2,[R0, #+0]
   \        0x4   0x23F8             MOVS     R3,#+248
   \        0x6   0x4013             ANDS     R3,R3,R2
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0x431A             ORRS     R2,R2,R3
   \        0xC   0x7002             STRB     R2,[R0, #+0]
    104            return handle_new_message(msg, timeout);
   \        0xE                      REQUIRE ?Subroutine0
   \        0xE                      ;; // Fall through to label ?Subroutine0
    105          }
    106          
    107          /************************************************************************************
    108          * MLMERXDisableRequest
    109          *
    110          * This function enables the MC1322X for a packet reception with or without a 
    111          * timeout using the 250 KHz clock.
    112          *
    113          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    114          FuncReturn_t MLMERXDisableRequest (message_t *msg)
    115          {
   \                     MLMERXDisableRequest: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    116            if(RX != get_pmsg_type(msg)){
   \        0x2   0x7801             LDRB     R1,[R0, #+0]
   \        0x4   0x0749             LSLS     R1,R1,#+29
   \        0x6   0x0F49             LSRS     R1,R1,#+29
   \        0x8   0x2901             CMP      R1,#+1
   \        0xA   0xD001             BEQ      ??MLMERXDisableRequest_0
    117              return gFailNoValidCondition_c;
   \        0xC   0x2003             MOVS     R0,#+3
   \        0xE   0xE001             B        ??MLMERXDisableRequest_1
    118            }
    119            else{
    120              return abort_message(msg);
   \                     ??MLMERXDisableRequest_0: (+1)
   \       0x10   0x....'....        BL       abort_message
   \                     ??MLMERXDisableRequest_1: (+1)
   \       0x14   0xBC0A             POP      {R1,R3}
   \       0x16   0x4718             BX       R3               ;; return
    121            }
    122          }
    123          
    124          /************************************************************************************
    125          * MLMEEnergyDetect 
    126          *
    127          * This function enables the MC1322X for a packet reception with or without a 
    128          * timeout using the 250 KHz clock.
    129          *
    130          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          FuncReturn_t MLMEEnergyDetect  (message_t *msg, channel_num_t u8channel)
    132          {
   \                     MLMEEnergyDetect: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    133            
    134            if( NULL == msg->pu8Buffer){
   \        0x2   0x6842             LDR      R2,[R0, #+4]
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD101             BNE      ??MLMEEnergyDetect_0
    135              return gFailOutOfRange_c;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xE009             B        ??MLMEEnergyDetect_1
    136            }
    137            else{
    138               set_pmsg_as_enrgy_detect(msg);
   \                     ??MLMEEnergyDetect_0: (+1)
   \        0xC   0x7802             LDRB     R2,[R0, #+0]
   \        0xE   0x23F8             MOVS     R3,#+248
   \       0x10   0x4013             ANDS     R3,R3,R2
   \       0x12   0x2202             MOVS     R2,#+2
   \       0x14   0x431A             ORRS     R2,R2,R3
   \       0x16   0x7002             STRB     R2,[R0, #+0]
    139               set_pmsg_ed_chann(msg, u8channel);
   \       0x18   0x7201             STRB     R1,[R0, #+8]
    140               return handle_new_message(msg,gNull_c);
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0x....'....        BL       handle_new_message
   \                     ??MLMEEnergyDetect_1: (+1)
   \       0x20   0xBC0A             POP      {R1,R3}
   \       0x22   0x4718             BX       R3               ;; return
    141            }
    142             
    143          }
    144          
    145          /************************************************************************************
    146          * MLMELinkQuality 
    147          *
    148          * This function computes the LQI value of the last received message, according to 
    149          * the following formula:
    150          *
    151          *    DAGC_RSSI =   Cal_factor_dB 
    152          *                - (LNA_min_gain_dB + lna_state*(LNA_max_gain_dB-LNA_min_gain_dB)) 
    153          *                + (IFA_max_gain_dB - 3*ifa_state) 
    154          *                + rx_dagc_gain_state  
    155          *
    156          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    157          FuncReturn_t MLMELinkQuality (uint8_t * u8ReturnValue)
    158          {
   \                     MLMELinkQuality: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    159            *u8ReturnValue = PhyPlmeGetLQI();
   \        0x4   0x....'....        BL       PhyPlmeGetLQI
   \        0x8   0x7020             STRB     R0,[R4, #+0]
    160            return gSuccess_c;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBC10             POP      {R4}
   \        0xE   0xBC08             POP      {R3}
   \       0x10   0x4718             BX       R3               ;; return
    161          }
    162          
    163          
    164          
    165          /************************************************************************************
    166          * MLMEPAOutputAdjust    
    167          *
    168          * This function adjusts the output power of the transmitter using the Power 
    169          * Amplifier included in the MC1322X.  
    170          *
    171          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    172          FuncReturn_t MLMEPAOutputAdjust (uint8_t u8Power )
    173          {
   \                     MLMEPAOutputAdjust: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    174            
    175            if (MAX_POWER < u8Power){
   \        0x2   0x2812             CMP      R0,#+18
   \        0x4   0xDB01             BLT      ??MLMEPAOutputAdjust_0
    176              return gFailOutOfRange_c;
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0xE004             B        ??MLMEPAOutputAdjust_1
    177            }
    178            else{
    179              if(gSuccess_c != SetPower(u8Power))
   \                     ??MLMEPAOutputAdjust_0: (+1)
   \        0xA   0x....'....        BL       SetPower
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD000             BEQ      ??MLMEPAOutputAdjust_1
    180                return gFailNoValidCondition_c;
   \       0x12   0x2003             MOVS     R0,#+3
    181            }
    182            return gSuccess_c;      
   \                     ??MLMEPAOutputAdjust_1: (+1)
   \       0x14   0xBC0A             POP      {R1,R3}
   \       0x16   0x4718             BX       R3               ;; return
    183            
    184          }
    185          
    186          /************************************************************************************
    187          * MLMEScanRequest    
    188          *
    189          * The MLMEScanRequest function configures an energy detect sequence in all channels
    190          * received as parameters.
    191          *
    192          ************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    193          FuncReturn_t MLMEScanRequest (uint16_t u16Channels, vScanCallback_t cbFn)
    194          {
    195            bScanReqFlag = TRUE;
   \                     MLMEScanRequest: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2   0x....             LDR      R3,??DataTable3_2
   \        0x4   0x701A             STRB     R2,[R3, #+0]
    196            u16ChannToScan = u16Channels;
   \        0x6   0x....             LDR      R2,??DataTable3_3
   \        0x8   0x8010             STRH     R0,[R2, #+0]
    197            vScanReqCallBack = cbFn;
   \        0xA   0x....             LDR      R0,??DataTable3_4
   \        0xC   0x6001             STR      R1,[R0, #+0]
    198            return gSuccess_c;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x4770             BX       LR               ;; return
    199          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     gaRFSynVCODivF_c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     gaRFSynVCODivI_c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     bScanReqFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     u16ChannToScan

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     vScanReqCallBack
    200          /************************************************************************************
    201          *************************************************************************************
    202          * Private functions
    203          *************************************************************************************
    204          ************************************************************************************/
    205          
    206          /************************************************************************************
    207          *************************************************************************************
    208          * Private Debug stuff
    209          *************************************************************************************
    210          ************************************************************************************/
    211          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   MCPSDataRequest
         8   -> handle_new_message
       8   MLMEEnergyDetect
         8   -> handle_new_message
       8   MLMEGetChannelRequest
         8   -> GetCurrentChannel
       8   MLMELinkQuality
         8   -> PhyPlmeGetLQI
       8   MLMEPAOutputAdjust
         8   -> SetPower
       8   MLMERXDisableRequest
         8   -> abort_message
       8   MLMERXEnableRequest
         8   -> handle_new_message
       0   MLMEScanRequest
       8   MLMESetChannelRequest
         8   -> SetChannel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       8  ?Subroutine0
      30  MCPSDataRequest
      36  MLMEEnergyDetect
      14  MLMEGetChannelRequest
      18  MLMELinkQuality
      24  MLMEPAOutputAdjust
      24  MLMERXDisableRequest
      14  MLMERXEnableRequest
      18  MLMEScanRequest
      34  MLMESetChannelRequest

 
 240 bytes in section .text
 
 240 bytes of CODE memory

Errors: none
Warnings: none
